import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/router'
import React, { useEffect, useState } from 'react'
import { BiHeart } from 'react-icons/bi';
import Poster from '../../../components/Poster';
import ReviewCard from '../../../components/ReviewCard';
import { Cast, Movie, MovieReview, TVDetails } from '../../../interface';
import { getAiringTodayTvShows, getMovieDetails, getOnTheAirTvShows, getReviews, getSimilar, getSimilarTVShows, getTrendingTvShows, getTVCasts, getTVDetails } from '../../api/movie';


interface ITV {
  tvDetails:TVDetails,
  similarTvShows:Movie[],
  tvCasts:Cast[],
  tvReviews:MovieReview[]
}

const TVDetailsPage = ({ tvDetails,similarTvShows,tvCasts,tvReviews }:ITV) => {
    const router = useRouter();
    const { tvId } =router.query;
    const [showMoreSeasons,setShowMoreSeasons] = useState<boolean>(false);
    const [showMoreCasts,setShowMoreCasts] = useState<boolean>(false);

    useEffect(()=>{
      setShowMoreSeasons(false);
      setShowMoreCasts(false);
    },[])
    // console.log(tvDetails)
  return (
      <main className=' bg-[#0D0C0F]  text-gray-500 ml-[55px] md:ml-[190px] mx-auto max-w-4xl min-h-screen space-y-4'>
        <Head>
            <title>{tvDetails.name}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
          
        <div className="relative">
          <Image alt={tvDetails.name} src={`https://image.tmdb.org/t/p/original${tvDetails.backdrop_path}`} width="100%" height={50} layout="responsive" objectFit='cover' />
          <div className=' w-[90%] px-2 py-4  -mt-20 text-white backdrop-sepia-0 bg-black/30 rounded-lg mx-auto space-y-2'>
                <div className='flex justify-between items-center'>
                    <h1 className='md:text-xl text-lg font-semibold'>{tvDetails.name}</h1>
                    <BiHeart size={24} className="cursor-pointer" />
                </div>
                <div className='flex gap-2 items-center'>
                    <p className='font-bold'>Genres:</p>
                    {tvDetails.genres.map((genre,i)=>(
                        <p key={genre.id} className=" text-sm md:text-base">
                            {!(i === tvDetails.genres.length - 1) ? genre.name + "," : genre.name}
                        </p>
                    ))}
                </div>
            
                <p className='font-bold'>Seasons: <span className="font-normal text-sm md:text-base">{tvDetails.number_of_seasons} seasons</span></p>
                <p className='font-bold'>Episodes: <span className="font-normal text-sm md:text-base">{tvDetails.number_of_episodes} episodes</span></p>
            
                <div>
                    <p className='font-bold'>Rating: <span className="font-normal text-sm md:text-base">{tvDetails.vote_average}</span></p>
                </div>
                <div className='flex items-center justify-between gap-2'>

                  {tvDetails.networks.map((network)=>(
                    <Image className='grayscale hover:grayscale-0 duration-150 ease-in-out transition-all' src={`https://image.tmdb.org/t/p/original${network.logo_path}`} alt={network.name} key={network.id} width={50} height={50} objectFit="contain" />
                  ))}
                </div>
            </div>
            <div className='text-gray-500 px-4 md:px-8 py-2 md:py-4 space-y-6'>
              <div>
                <h1 className='text-lg font-bold'>Plot</h1>
                <p className='text-sm md:text-base'>
                  {tvDetails.overview}
                </p>
              </div>
              <div className='space-y-2'>
                {
                  tvDetails.seasons.length !== 0 && (
                    <>
                      <h1 className='text-lg font-bold'>Seasons</h1>
                      <div className="grid grid-cols-4 gap-4 ">
                        {tvDetails.seasons.slice(0,showMoreSeasons ? tvDetails.seasons.length : 4).map((season)=>(
                          <Link key={season.id} href={`/tv-series/${tvId}/season/${season.season_number}`}>
                            <div  className="cursor-pointer">
                                <Image alt={season.name} src={`https://image.tmdb.org/t/p/original/${season.poster_path}`} width={200} height={200} objectFit="cover" />
                                <div className='px-2'>
                                  <p className="truncate">{season.name}</p>
                                </div>
                            </div>
                          </Link>
                 
                            
                        ))}
                    
                      </div>
                      <p className='text-center mt-4 cursor-pointer' onClick={()=>setShowMoreSeasons(!showMoreSeasons)}>
                          {showMoreSeasons ? "Show less" : "Show more"}
                      </p>
                  
                    </>
                  )
                }
              </div>
              <div className='space-y-2'>
                <h1 className='text-xl font-bold'>Casts</h1>
                <div className='grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-3'>
                    {tvCasts.slice(0,showMoreCasts ? 15 : 6).map((cast)=>(  
                        <div key={cast.id}  className='flex flex-col space-y-2 '>
                            <Image  alt={cast.name} src={`https://image.tmdb.org/t/p/original/${cast.profile_path}`}  width={150} objectFit="cover" height={200} className="rounded-md mb-2" />
                            <div>
                                <p className='text-white'>{cast.name}</p>
                                <p className='truncate'>{cast.character}</p>
                            </div>
                            
                     
                        </div>
                      
                    ))}
                    
                </div>
                <p className='cursor-pointer whitespace-nowrap mx-auto w-16' onClick={()=>setShowMoreCasts(!showMoreCasts)}>{showMoreCasts ? "Show less" : "Show more"}</p>
            </div>
              <div className='space-y-2'>
                <h1 className='text-lg font-bold'>Similar TV Shows</h1>
                <div className='row scrollbar-thumb-gray-800 scrollbar-thin scrollbar-track-gray-none rounded scrollbar-thumb-rounded-md'>
                  {similarTvShows.map((show)=>(
                    <Poster key={show.id} movie={show} size="normal" type="tv-series"  />
                  ))}
               </div>
              </div>
              <div className="space-y-2">
                <div className='flex justify-between items-center'>
                    <h1 className='text-xl font-bold'>Reviews</h1>
                    {/* <p className='cursor-pointer' onClick={()=>setShowMoreRecommendations(!showMoreRecommendations)}>{showMoreRecommendations ? "Show less" : "Show more"}</p> */}
                </div>
                {tvReviews.length !== 0 ? (
                    <div className='space-y-8 divide-y divide-gray-500'>
                        {tvReviews.map((review)=>(
                            <ReviewCard key={review.id} review={review} />
                        ))}
                    </div>
                ):(
                    <p>No reviews</p>
                )}
                
                <div>
                  
                </div>
            </div>
            </div>
        </div>
      </main>
    
  )
}

export const getStaticPaths = async() => {
  const [trendingTvShows,airingToday,onTheAir] =([await getTrendingTvShows(),await getAiringTodayTvShows(),await getOnTheAirTvShows()]);

  const trendingIds = trendingTvShows.map((tv:Movie)=>tv.id);
  const airingIds = airingToday.map((tv:Movie)=>tv.id);
  const onTheAirIds = onTheAir.map((tv:Movie)=>tv.id);

  const ids = [...trendingIds,...airingIds,...onTheAirIds];

  const paths = ids.map((id)=>({
    params:{
        tvId:id.toString()
    }
  }))

  return {
    paths,
    fallback:"blocking"
  }

}

export const getStaticProps = async({ params }:any) => {
  const [tvDetails,similarTvShows,tvCasts,tvReviews] = ([await getTVDetails(params.tvId),await getSimilarTVShows(params.tvId),await getTVCasts(params.tvId),await getReviews(params.tvId,"tv")])

  return {
    props:{
      tvDetails,
      similarTvShows,
      tvCasts,
      tvReviews
    }
  }
}

export default TVDetailsPage